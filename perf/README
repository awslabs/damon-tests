This directory contains files for the performance test of DAMON.

The test measures the runtime and memory footprint of 25 workloads in
PARSEC3[1] and SPLASH-2X[2] benchmark suites with different kernel
configurations.  The configurations are as below:

    orig	Original kernel running THP with 'madvise()' enable policy
    rec		Kernel running DAMON with record option for the workloads
    thp		Original kernel running THP with 'always' enable policy
    ethp	Kernel running 'efficient THP' operation scheme.
    prcl	Kernel running 'proactive reclamation' operation scheme.

[1] https://parsec.cs.princeton.edu/parsec3-doc.htm
[2] https://parsec.cs.princeton.edu/parsec3-doc.htm#splash2x


Pre-requisites
==============

lazybox
-------

The tests are using lazybox[1], a toolset for various cases.  You should place
it at '$HOME/lazybox'.  For example:

    $ cd $HOME; git clone https://github.com/sjp38/lazybox

[1] https://github.com/sjp38/lazybox


parsec3_on_ubuntu
-----------------

For more easier and automated use of the target workloads in PARSEC3 and
SPLASH-2X, the tests use another wrapper for the benchmark suites, called
parsec3_on_ubuntu[1].  You should first place it at '$HOME/parsec3_on_ubuntu'.
For example:

    $ cd $HOME; git clone https://github.com/sjp38/parsec3_on_ubuntu

After that, you should follow the instructions in the README in the project to
install PARSEC3 and SPLASH-2X workloads.  For example, if you are on Ubuntu
18.04:

    $ cd $HOME/parsec3_on_ubuntu
    $ ./getsrc.sh; ./patch-for-ubntu-xenial.sh; ./intall_dep-xenial.sh;
    $ ./build.sh; ./build.sh splash2x

[1] https://github.com/sjp38/parsec3_on_ubuntu


Python3
-------

Lazybox depends on Python3.  Install it using your package manager.  However,
most python scripts in the lazybox are python2 compatible.   You could try
changing the shebangs to python2.


gnuplot
-------

Visualization of the outputs in the reports are made using 'gnuplot'.  Install
it using your package manager.


HOWTO
=====

This section describes how you can run the tests and make a report on your
system.  Before following below instructions, please ensure that your system
meets the above mentioned pre-requisites.

Just sequentially execute below three commands.

    $ ./run.sh
    $ ./post.sh
    $ ./mk_reports.sh

The first command runs the workloads and measure some metrics.  It would take
more than 10 hours.  The second command does post-processing of the numbers
gathered during the runs.  The final command generates the reports for you and
show a summary in text form.  It generates detailed report in text form, and in
html form at 'report/report.txt' and 'report/html/index.html', respectively.
The html form report includes simple visualizations of the output, either.  The
visualizations are also available in 'report/plots/' directory.


Contacts
========

If you have some questions or comments regarding this, please contact to:

    SeongJae Park <sjpark@amazon.de>
