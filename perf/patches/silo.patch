From 292c2492c08f9ded7719740a0f6d32b99afbf8f7 Mon Sep 17 00:00:00 2001
From: SeongJae Park <sjpark@amazon.de>
Date: Thu, 12 Nov 2020 12:10:42 +0000
Subject: [PATCH] benchmarks/ycsb: Implement zipfian distribution

This commit implements zipfian distribution for silo ycsb benchmark.
Follow below instructions for run.

Build
=====

```
$ sudo apt install libnuma-dev libaio-dev libdb++-dev
$ make -j dbtest
```

Run
===

```
$ ./out-perf.masstree/benchmarks/dbtest --bench ycsb \
	--verbose --scale-factor 100 --runtime <seconds> \
	-o --zipfian-alpha=<alpha>"
```

Please update the '<seconds>' and '<alpha>' as you need.

'<alpha>' is the zipfian alpha value.  As the value is higher, the
workload more skewed.  For more detail:
https://www.csee.usf.edu/~kchriste/tools/genzipf.c

Negative '<alpha>' means uniform distribution, which is same to silo's
original behavior.

Output
======

In the last line of the output, you will find 5 numbers like below:

```
893856 893856 0.00108181 0 0
```

The first number is throughput and the third is latency.

Signed-off-by: SeongJae Park <sjpark@amazon.de>
---
 Makefile           |  2 +-
 benchmarks/ycsb.cc | 89 +++++++++++++++++++++++++++++++++++++++++++---
 2 files changed, 85 insertions(+), 6 deletions(-)

diff --git a/Makefile b/Makefile
index 682b4cb..dbe3f9c 100644
--- a/Makefile
+++ b/Makefile
@@ -80,7 +80,7 @@ CXXFLAGS += -MD -Ithird-party/lz4 -DCONFIG_H=\"$(CONFIG_H)\"
 ifeq ($(DEBUG_S),1)
         CXXFLAGS += -fno-omit-frame-pointer -DDEBUG
 else
-        CXXFLAGS += -Werror -O2 -funroll-loops -fno-omit-frame-pointer
+        CXXFLAGS += -O2 -funroll-loops -fno-omit-frame-pointer
 endif
 ifeq ($(CHECK_INVARIANTS_S),1)
 	CXXFLAGS += -DCHECK_INVARIANTS
diff --git a/benchmarks/ycsb.cc b/benchmarks/ycsb.cc
index 80313e1..639c615 100644
--- a/benchmarks/ycsb.cc
+++ b/benchmarks/ycsb.cc
@@ -10,6 +10,8 @@
 #include <getopt.h>
 #include <numa.h>
 
+#include <math.h>
+
 #include "../macros.h"
 #include "../varkey.h"
 #include "../thread.h"
@@ -23,7 +25,73 @@ using namespace std;
 using namespace util;
 
 static size_t nkeys;
-static const size_t YCSBRecordSize = 100;
+static const size_t YCSBRecordSize = 1000;
+
+struct zipf {
+    double alpha;
+    fast_random *r;
+    double *cum_probs;
+    int max_val;
+} g_zipf;
+
+/* Set zipf for [0, max_val) */
+void zipf_init(struct zipf *z, double alpha, int max_val, int seed)
+{
+    double c = 0;
+    double *cum_probs;
+    int i;
+    fast_random r(seed);
+
+    z->alpha = alpha;
+    z->r = &r;
+
+    for (i = 1; i <= max_val; i++)
+        c = c + (1.0 / pow((double)i, alpha));
+    c = 1.0 / c;
+
+    cum_probs = (double *)malloc(sizeof(double) * (max_val + 1));
+    if (!cum_probs) {
+        cerr << "cum_probs alloc failed" << endl;
+        exit(1);
+    }
+
+    cum_probs[0] = 0;
+    for (i = 1; i <= max_val; i++)
+        cum_probs[i] = cum_probs[i - 1] + c / pow((double)i, alpha);
+
+    z->cum_probs = cum_probs;
+    z->max_val = max_val;
+}
+
+/* Return zipf random number in [0, z->max_val) */
+static int zipf_next(struct zipf *z)
+{
+    double *probs = z->cum_probs;
+    double prob;
+    int low, high, mid;
+
+    if (z->alpha < 0)
+        return z->r->next() % z->max_val;
+
+    do
+        prob = z->r->next_uniform();
+    while (prob == 0);
+
+    for (low = 1, high = z->max_val; low <= high; ) {
+        mid = (low + high) / 2;
+        if (probs[mid] >= prob && probs[mid - 1] < prob)
+            return mid - 1;
+        else if (probs[mid] > prob)
+            high = mid - 1;
+        else
+            low = mid + 1;
+    }
+
+    cerr << "zipf not found!" << endl;
+    exit(1);
+
+    return 0;
+}
 
 // [R, W, RMW, Scan]
 // we're missing remove for now
@@ -52,7 +120,7 @@ public:
     void * const txn = db->new_txn(txn_flags, arena, txn_buf(), abstract_db::HINT_KV_GET_PUT);
     scoped_str_arena s_arena(arena);
     try {
-      const uint64_t k = r.next() % nkeys;
+      const uint64_t k = zipf_next(&g_zipf);
       ALWAYS_ASSERT(tbl->get(txn, u64_varkey(k).str(obj_key0), obj_v));
       computation_n += obj_v.size();
       measure_txn_counters(txn, "txn_read");
@@ -76,7 +144,7 @@ public:
     void * const txn = db->new_txn(txn_flags, arena, txn_buf(), abstract_db::HINT_KV_GET_PUT);
     scoped_str_arena s_arena(arena);
     try {
-      tbl->put(txn, u64_varkey(r.next() % nkeys).str(str()), str().assign(YCSBRecordSize, 'b'));
+      tbl->put(txn, u64_varkey(zipf_next(&g_zipf)).str(str()), str().assign(YCSBRecordSize, 'b'));
       measure_txn_counters(txn, "txn_write");
       if (likely(db->commit_txn(txn)))
         return txn_result(true, 0);
@@ -134,7 +202,7 @@ public:
   {
     void * const txn = db->new_txn(txn_flags, arena, txn_buf(), abstract_db::HINT_KV_SCAN);
     scoped_str_arena s_arena(arena);
-    const size_t kstart = r.next() % nkeys;
+    const size_t kstart = zipf_next(&g_zipf);
     const string &kbegin = u64_varkey(kstart).str(obj_key0);
     const string &kend = u64_varkey(kstart + 100).str(obj_key1);
     worker_scan_callback c;
@@ -462,6 +530,7 @@ private:
 void
 ycsb_do_test(abstract_db *db, int argc, char **argv)
 {
+  double zipfian_alpha = 0;
   nkeys = size_t(scale_factor * 1000.0);
   ALWAYS_ASSERT(nkeys > 0);
 
@@ -470,10 +539,11 @@ ycsb_do_test(abstract_db *db, int argc, char **argv)
   while (1) {
     static struct option long_options[] = {
       {"workload-mix" , required_argument , 0 , 'w'},
+      {"zipfian-alpha" , required_argument , 0 , 'z'},
       {0, 0, 0, 0}
     };
     int option_index = 0;
-    int c = getopt_long(argc, argv, "w:", long_options, &option_index);
+    int c = getopt_long(argc, argv, "w:z:", long_options, &option_index);
     if (c == -1)
       break;
     switch (c) {
@@ -498,6 +568,12 @@ ycsb_do_test(abstract_db *db, int argc, char **argv)
       }
       break;
 
+    case 'z':
+      {
+        zipfian_alpha = atof(optarg);
+      }
+      break;
+
     case '?':
       /* getopt_long already printed an error message. */
       exit(1);
@@ -512,8 +588,11 @@ ycsb_do_test(abstract_db *db, int argc, char **argv)
     cerr << "  workload_mix: "
          << format_list(g_txn_workload_mix, g_txn_workload_mix + ARRAY_NELEMS(g_txn_workload_mix))
          << endl;
+    cerr << "  zipfian_alpha: " << zipfian_alpha << endl;
   }
 
+  zipf_init(&g_zipf, zipfian_alpha, nkeys, 8544290);
+
   ycsb_bench_runner r(db);
   r.run();
 }
-- 
2.17.1

